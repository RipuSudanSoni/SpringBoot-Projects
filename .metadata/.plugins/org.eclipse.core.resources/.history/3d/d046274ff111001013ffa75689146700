
package com.example.Tesing.project.controller;

import org.springframework.web.bind.annotation.*;
import com.example.Tesing.project.DAO.TextRequest;
import com.example.Tesing.project.DAO.TextResponse;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

@RestController
@CrossOrigin(origins = "http://localhost:5173")
public class EncryptController {

//    private static final String SECRET_KEY = "1234567890123456";
	private static final String SECRET_KEY = "1234567890";
    private static final String SALT = "Ripu";

    @PostMapping("/encrypt")
    public TextResponse encryptText(@RequestBody TextRequest request) {
        try {
            String encrypted = encrypt(request.getText(), SECRET_KEY, SALT);
            return new TextResponse(encrypted);
        } catch (Exception e) {
            throw new RuntimeException("Encryption error", e);
        }
    }

    @PostMapping("/decrypt")
    public TextResponse decryptText(@RequestBody TextRequest request) {
        try {
            String decrypted = decrypt(request.getText(), SECRET_KEY, SALT);
            return new TextResponse(decrypted);
        } catch (Exception e) {
            throw new RuntimeException("Decryption error", e);
        }
    }

    private String encrypt(String plainText, String secret, String salt) throws Exception {
        String saltedText = salt + plainText;
        SecretKeySpec key = new SecretKeySpec(secret.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encrypted = cipher.doFinal(saltedText.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }

    private String decrypt(String encryptedText, String secret, String salt) throws Exception {
        byte[] decodedBytes = Base64.getDecoder().decode(encryptedText);
        SecretKeySpec key = new SecretKeySpec(secret.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decrypted = cipher.doFinal(decodedBytes);
        
        String decryptedText = new String(decrypted);
        
        if (decryptedText.startsWith(salt)) {
            return decryptedText.substring(salt.length());
        } else {
            throw new RuntimeException("Invalid salt during decryption");
        }
    }
}
